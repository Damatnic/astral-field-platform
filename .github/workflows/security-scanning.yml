name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security scans at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - vulnerability
        - secrets
        - dependency
        - sast
        - container

env:
  NODE_VERSION: '18.x'

jobs:
  # Secrets Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Semgrep Secret Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/secrets
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            trufflehog-results.json
            gitleaks-report.json
            semgrep-results.json

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == 'vulnerability' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json

      - name: OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --output=osv-results.json
            --format=json
            ./

      - name: Retire.js scan
        run: |
          npx retire --outputformat json --outputpath retire-results.json || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
            osv-results.json
            retire-results.json

  # Static Application Security Testing (SAST)
  sast-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Security Plugin
        run: |
          npm install --save-dev eslint-plugin-security
          npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-security-results.json || true

      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-scan-results
          path: |
            eslint-security-results.json
            semgrep-results.json

  # Container Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: astral-field:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'astral-field:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'astral-field:security-scan'
          fail-build: false
          severity-cutoff: medium

      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: 'astral-field:security-scan'
          sarif-file: scout-results.sarif
          summary: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            scout-results.sarif
            ${{ steps.grype-scan.outputs.sarif }}

  # License Compliance Scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: License check with license-checker
        run: |
          npx license-checker --json --out license-report.json
          npx license-checker --summary

      - name: FOSSA scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true

      - name: Upload license scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-scan-results
          path: |
            license-report.json

  # Infrastructure as Code (IaC) Security
  iac-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scanner
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Terrascan IaC scanner
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_version: 'v1'
          policy_type: 'docker'
          only_warn: true
          sarif_upload: true

      - name: Upload IaC scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-scan-results
          path: |
            checkov-results.sarif
            terrascan-results.sarif

  # Web Application Security Testing (DAST)
  dast-scan:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && (github.event.inputs.scan_type == 'comprehensive' || github.event_name != 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 5 -T 60'

      - name: Nuclei vulnerability scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          templates: 'vulnerabilities,misconfiguration,exposed-panels'
          output: 'nuclei-results.json'
          json: true

      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-scan-results
          path: |
            report_html.html
            report_json.json
            nuclei-results.json

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, sast-scan, container-scan, license-scan, iac-scan, dast-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          path: security-results

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Branch:** ${{ github.ref }}" >> security-report.md
          echo "" >> security-report.md

          echo "## Scan Results Summary" >> security-report.md
          echo "" >> security-report.md

          # Check if each scan completed
          if [ -d "security-results/secret-scan-results" ]; then
            echo "✅ Secret Scan: Completed" >> security-report.md
          else
            echo "⏭️ Secret Scan: Skipped" >> security-report.md
          fi

          if [ -d "security-results/dependency-scan-results" ]; then
            echo "✅ Dependency Scan: Completed" >> security-report.md
          else
            echo "⏭️ Dependency Scan: Skipped" >> security-report.md
          fi

          if [ -d "security-results/sast-scan-results" ]; then
            echo "✅ SAST Scan: Completed" >> security-report.md
          else
            echo "⏭️ SAST Scan: Skipped" >> security-report.md
          fi

          if [ -d "security-results/container-scan-results" ]; then
            echo "✅ Container Scan: Completed" >> security-report.md
          else
            echo "⏭️ Container Scan: Skipped" >> security-report.md
          fi

          if [ -d "security-results/dast-scan-results" ]; then
            echo "✅ DAST Scan: Completed" >> security-report.md
          else
            echo "⏭️ DAST Scan: Skipped" >> security-report.md
          fi

          echo "" >> security-report.md
          echo "## Next Steps" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review all scan results in the artifacts" >> security-report.md
          echo "2. Address any high or critical vulnerabilities" >> security-report.md
          echo "3. Update dependencies with known vulnerabilities" >> security-report.md
          echo "4. Review and rotate any detected secrets" >> security-report.md
          echo "" >> security-report.md

          # Add file listing of all results
          echo "## Available Reports" >> security-report.md
          echo "" >> security-report.md
          find security-results -name "*.json" -o -name "*.sarif" -o -name "*.html" | while read file; do
            echo "- $file" >> security-report.md
          done

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: |
            security-report.md
            security-results/

      - name: Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Report\n\n${report}`
            });

  # Security Alerts
  security-alerts:
    name: Security Alerts
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, sast-scan]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 Security scan failed on main branch!
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
            
            Please review the security scan results immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Security Scan Failure - ' + new Date().toISOString(),
              body: `## Security Scan Failure
              
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              One or more security scans have failed. Please review the workflow results and address any security vulnerabilities immediately.
              
              [View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['security', 'urgent', 'bug']
            });

  # Cleanup
  cleanup:
    name: Cleanup Scan Artifacts
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always()
    steps:
      - name: Clean up old security scan artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const securityArtifacts = artifacts.data.artifacts.filter(a => 
              a.name.includes('security') || a.name.includes('scan-results')
            );
            
            // Keep only the 5 most recent security artifacts
            const toDelete = securityArtifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5);
            
            for (const artifact of toDelete) {
              const age = Date.now() - new Date(artifact.created_at);
              // Delete artifacts older than 30 days
              if (age > 30 * 24 * 60 * 60 * 1000) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted old security artifact: ${artifact.name}`);
              }
            }